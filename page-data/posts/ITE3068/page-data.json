{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/ITE3068/","result":{"data":{"markdownRemark":{"html":"<p>Project: Software Studio @ cs.hanynag</p>\n<h2 id=\"project-requirements\">Project Requirements</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Use <a href=\"https://www.docker.com/\">Docker</a> (10pts)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Performance Comparison (using <a href=\"http://naver.github.io/arcus/\">arcus</a>) (20pts)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Use <a href=\"https://github.com/naver/nbase-arc\">nBase-ARC</a> (20pts)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Use multi-node (10pts)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Use <a href=\"https://github.com/naver/hubblemon\">Hubblemon</a> (10pts)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Use <a href=\"http://naver.github.io/ngrinder/\">nGrinder</a> (10pts)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <a href=\"https://github.com/naver\">Naver Open Source</a> Contribution\n<ul>\n<li>Oppend Issues\n<ol>\n<li><a href=\"https://github.com/naver/arcus-python-client/issues/11\">arcus-python-client: <code class=\"language-text\">Pypi's arcus package seems to have expired</code></a></li>\n<li><a href=\"https://github.com/naver/arcus-python-client/issues/12\">arcus-python-client: <code class=\"language-text\">Not working in macOS</code></a></li>\n<li><a href=\"https://github.com/naver/arcus/issues/35\">arcus: <code class=\"language-text\">Support docker</code></a></li>\n</ol>\n</li>\n<li>Pull Requests\n<ol>\n<li><a href=\"https://github.com/naver/hubblemon/pull/22\">hubblemon: <code class=\"language-text\">update dependency</code></a></li>\n<li><a href=\"https://github.com/naver/arcus-python-client/pull/13\">arcus-python-client: <code class=\"language-text\">Update Poller for darwin(macOS)</code></a></li>\n<li><a href=\"https://github.com/naver/arcus/pull/36\">arcus: <code class=\"language-text\">Update dockerfile</code></a></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"project\">Project</h2>\n<p>Using <a href=\"https://www.docker.com/\">Docker</a> with <a href=\"https://hub.docker.com/r/ruo91/arcus/\">arcus</a>, <a href=\"https://hub.docker.com/_/mysql/\">MySQL</a>, <a href=\"https://hub.docker.com/r/hyeongseok05/nbase-arc/\">nBase-ARC</a>.</p>\n<p>API app is simple flask app for performance comparison.</p>\n<p>All settings are stored in <code class=\"language-text\">settings.json</code>. you can change enviroments for you own service.</p>\n<h3 id=\"docker\">Docker</h3>\n<p>Using dockerized images and dockerfiles.</p>\n<p>Check <code class=\"language-text\">app.py</code> and <code class=\"language-text\">settings.json</code> for docker run.</p>\n<p><img src=\"https://github.com/jiunbae/ITE3068/blob/master/results/docker%20process.png?raw=true\" alt=\"Docker ps -a\"></p>\n<h3 id=\"api-app-for-performance-comparison\">API App (for performance comparison)</h3>\n<p>Powered by flask, support simple RestfulAPI for performance comparison.</p>\n<p>API Lists</p>\n<ul>\n<li><code class=\"language-text\">GET</code>: <code class=\"language-text\">/init</code>\nInitialize database, create testset table, and insert some records.</li>\n<li><code class=\"language-text\">GET</code>: <code class=\"language-text\">/mysql</code>\nSelect some integer from mysql (range 0 - testsize)</li>\n<li><code class=\"language-text\">GET</code>: <code class=\"language-text\">/arcus</code>\nSelect some integer from arcus if missed, select from mysql and add to arcus</li>\n<li><code class=\"language-text\">GET</code>: <code class=\"language-text\">/nbase</code>\nSelect some integer from nbase if missed, select from mysql and add to nbase</li>\n</ul>\n<h3 id=\"mysql\">MySQL</h3>\n<p>Pulling from public mysql dockerfile(version <code class=\"language-text\">5.7</code>, but it can also <code class=\"language-text\">latest</code>).\nThere are some enviroments for mysql db.</p>\n<ul>\n<li><em>MYSQL_ROOT_PASSWORD</em>: password</li>\n<li><em>MYSQL_USER</em>: maybe</li>\n<li><em>MYSQL_PASSWORD</em>: password</li>\n<li><em>MYSQL_DATABASE</em>: ite3068</li>\n</ul>\n<h3 id=\"arcus\">Arcus</h3>\n<p>Pulling from <a href=\"https://hub.docker.com/r/ruo91/arcus/\">ruo91/arcus</a> and some appendix scripts for memcached server.\nSee <code class=\"language-text\">arcus/install.sh</code>. It provide arcus to memcached server list and set up zookeeper and memcached.\nIt automatically run after docker container started.</p>\n<p>Arcus is memory cache cloud based on <a href=\"https://memcached.org/\">memcached</a> and <a href=\"https://zookeeper.apache.org/\">zookeeper</a>. So Arcus is distributed cache cloud. Therefore Arcus can configure multiple nodes to improve performance.</p>\n<p>In this project, use 3 memcached-server on arcus. You can see how many nodes are used in settings.json.</p>\n<h3 id=\"nbase-arc\">nBase-ARC</h3>\n<p>Pulling from <a href=\"https://hub.docker.com/r/hyeongseok05/nbase-arc/\">hyeongseok05/nbase-arc</a>.\nDockerfile prepare all for start nbase-arc, so just start docker container is enough.</p>\n<p>nBase-ARC is distributed storage platform using <a href=\"https://redis.io/\">redis</a> and clustering.\nA cluster consists of several gateways and replication groups, and each replication group has its own storage unit called redis.\nThere is an advantage that the redis API can be used as it is.</p>\n<p>In this project use 4-cluster node server.</p>\n<h3 id=\"hubblemon\">Hubblemon</h3>\n<p>It's difficult to compose all of docker container in a single <code class=\"language-text\">docker-compose</code>.\n<em>Because, arcus and memcached require settins after container started.</em></p>\n<p>So, hubblemon run each <code class=\"language-text\">mysql</code>, <code class=\"language-text\">arcus</code>, <code class=\"language-text\">nbase</code>.\nTo do this, after each container started, process <code class=\"language-text\">hubblemon/install.sh</code>.</p>\n<p>Script contains below</p>\n<ul>\n<li>Install depedency (It takes time depending on the internet(or repo server) speed)</li>\n<li>Clone hubblemon repository</li>\n<li>Copy each setting</li>\n<li>Install python dependency</li>\n<li>Run server</li>\n</ul>\n<p>Hubblemon initially started to monitor Arcus. So it is not very difficult and kind to use with other clients while currently support other clients,</p>\n<p>Monitoring is based on a django, web and information about the listener is delivered when the client is connected, and the client executes the information collected by the server to be monitored.</p>\n<p>Since hubblemon runs in the container, it can take a very long time to start(In my case, about 5-6m).</p>\n<p>In settings.json, you can see <code class=\"language-text\">HUBBLEMON</code> environments. This port is the port where HubbleMon runs in each container. And <code class=\"language-text\">install.sh</code> script on hubblemon dir is for run hubblemon in each container.</p>\n<ul>\n<li>MySQL: 4584</li>\n<li>Arcus: 4585</li>\n<li>nBase-ARC:  4586</li>\n</ul>\n<p><img src=\"https://github.com/jiunbae/ITE3068/blob/master/results/hubblemon.png?raw=true\" alt=\"Running hubblemon on arcus\"></p>\n<h3 id=\"ngrinder-test\">nGrinder Test</h3>\n<p>nGrinder supports writing a script that sends an HTTP request and sends it to the agent for testing.\nThe web server receives the HTTP request and can communicate with the mysql server or the arcus server.\nNow you can actually write those scripts through nGrinder to compare performance differences between using the mysql server directly and the arcus server.</p>\n<p>You can test the performance in nGrinder by calling the api created in the flask app above.</p>\n<p>Check my results in <code class=\"language-text\">results</code> directory.</p>\n<h2 id=\"review\">Review</h2>\n<p>The performance test of <code class=\"language-text\">mysql</code>, <code class=\"language-text\">arcus</code> and <code class=\"language-text\">nbase</code>.</p>\n<p><img src=\"https://github.com/jiunbae/ITE3068/blob/master/results/mysql.png?raw=true\" alt=\"mysql\"></p>\n<p><em>mysql ngrinder results</em></p>\n<p><img src=\"https://github.com/jiunbae/ITE3068/blob/master/results/arcus.png?raw=true\" alt=\"arcus\"></p>\n<p><em>arcus ngrinder result</em></p>\n<p><img src=\"https://github.com/jiunbae/ITE3068/blob/master/results/nbase.png?raw=true\" alt=\"nbase\"></p>\n<p><em>nbase ngrinder result</em></p>\n<p>nBase-ARC is fastest because memory cache is faster than access raw db. Over 10 times faster than mysql.\nNow that mysql is running too slow, arcus is slowing down.\nIf you increase the experiment time or if mysql is fast enough, the acus will be even faster.</p>\n<h2 id=\"usage\">Usage</h2>\n<p>Just run application, it uses docker service.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pip3 install -r api/requirements.txt\n\npython3 app.py start\n\n// To setup arcus memcached server\ndocker exec -it arcus-admin /bin/bash -c /opt/install.sh\n\n// To setup hubblemon, each container\ndocker exec -it arcus-memcached-1 /bin/bash -c /opt/install.sh\ndocker exec -it mysql /bin/bash -c /opt/install.sh\ndocker exec -it nbase-arc /bin/bash -c /opt/install.sh\n\n// You can run this command in other shell after above execution print `Docker started!`\n// Waiting hubblemon takes too long, You do not have to wait for hubblemon to start the api server.\npython3 api/app.py</code></pre></div>\n<p>for stop service,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python3 app.py stop</code></pre></div>","excerpt":"Project: Software Studio @ cs.hanynag Project Requirements Use Docker (10pts) Performance Comparison (using arcus) (20pts) Use nBase-ARC (20pts) Use multi-node (10pts) Use Hubblemon (10pts) Use nGrin…","frontmatter":{"date":"17.12.15","description":"ITE3068: Software Studio; Naver open source project","heroImage":null,"heroImageAlt":null,"tags":["curriculum"],"title":"ITE3068: Software Studio"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#project-requirements\">Project Requirements</a></p>\n</li>\n<li>\n<p><a href=\"#project\">Project</a></p>\n<ul>\n<li><a href=\"#docker\">Docker</a></li>\n<li><a href=\"#api-app-for-performance-comparison\">API App (for performance comparison)</a></li>\n<li><a href=\"#mysql\">MySQL</a></li>\n<li><a href=\"#arcus\">Arcus</a></li>\n<li><a href=\"#nbase-arc\">nBase-ARC</a></li>\n<li><a href=\"#hubblemon\">Hubblemon</a></li>\n<li><a href=\"#ngrinder-test\">nGrinder Test</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#review\">Review</a></p>\n</li>\n<li>\n<p><a href=\"#usage\">Usage</a></p>\n</li>\n</ul>"}},"pageContext":{"id":"67e33ddd-e318-5770-a3e8-999133b4b2c9","frontmatter__slug":"/ITE3068","previous":"/ITE4065","previousTitle":"ITE4065: 멀티코어 프로그래밍","next":"/Kaggle-Digit-Recognizer","nextTitle":"Kaggle로 시작하는 데이터 사이언스 Digit Recognizer"}},"staticQueryHashes":["12962592","3399079524","3470099541","76375841"],"slicesMap":{}}