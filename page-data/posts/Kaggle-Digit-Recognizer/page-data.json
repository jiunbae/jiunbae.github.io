{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/Kaggle-Digit-Recognizer/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"kaggle로-시작하는-데이터-사이언스-digit-recognizer\">Kaggle로 시작하는 데이터 사이언스: Digit Recognizer</h1>\n<p>머신러닝에 관련해서 가장 유명한 \"Hello, World!\"같은 예제는 아마 <a href=\"https://en.wikipedia.org/wiki/MNIST_database\">MNIST</a>일 것 입니다. Kaggle에도 MNIST 데이터를 사용한 <a href=\"https://www.kaggle.com/c/digit-recognizer\">Digit Recognizer</a>가 존재합니다.</p>\n<p><code class=\"language-text\">Overview</code> 에는 간략한 설명이 적혀있습니다. <code class=\"language-text\">Data</code>탭에는  train, test, sample_submission이 들어있습니다. 보통 <code class=\"language-text\">csv</code>확장자 형태로 주어지며, Description에 각각 무엇을 나타내는지 설명이 있습니다. train에는 라벨과 28x28의 1채널 이미지가 42000개 들어있습니다. test에는 라벨을 제외하고 1채널 이미지 28000개가 들어있습니다. <code class=\"language-text\">sample_submission.csv</code>를 확인해 보면 28000개의 test 데이터의 라벨을 만들어 내는 것 임을 알 수 있습니다.</p>\n<h2 id=\"환경-준비하기\">환경 준비하기</h2>\n<p>저는 <a href=\"https://www.python.org/\">python</a>을 가장 좋아하며, 데이터 사이언스를 하기에 특히 더 좋은 언어라고 생각합니다. 특히 <a href=\"http://jupyter.org/\">Jupyter</a>와 함께 사용하면 쉽고 빠르게 코드를 작성하고 실행해 볼 수 있습니다. Jupyter의 설치를 완료하고 실행하면 다음과 같은 화면을 볼 수 있습니다.</p>\n<p><img src=\"https://drive.google.com/uc?id=0BwQhFb-IfuTFMnZISmF0TGp1VkE\" alt=\"Jupyter\"></p>\n<p>파이썬에는 수 많은 패키지들이 있으며 그 중에서는 데이터 사이언스에 특화된 좋은 패키지들도 많이 있습니다. 아래의 패키지들은 매우 자주 사용되고, 사용하기 편합니다.</p>\n<ul>\n<li><a href=\"http://www.numpy.org/\">Numpy</a>: 두말 할 나위 없는 최고의 파이썬 라이브러리입니다.</li>\n<li><a href=\"http://pandas.pydata.org/\">Pandas</a>: 데이터를 쉽게 가공할 수 있습니다.</li>\n<li><a href=\"https://matplotlib.org/\">Matplotlib</a>: 시각화를 위한 라이브러리입니다.</li>\n</ul>\n<h2 id=\"데이터-확인하기\">데이터 확인하기</h2>\n<p>먼저 주어진 <code class=\"language-text\">train.csv</code>, <code class=\"language-text\">test.csv</code>에 어떠한 내용이 있는지 확인해 봅시다. 아래의 화면은 주어진 데이터들을 불러온 화면입니다. (pd는 pandas입니다.)</p>\n<p><img src=\"https://drive.google.com/uc?id=0BwQhFb-IfuTFNW5ONnI2V0FIU2s\" alt=\"Load data\"></p>\n<p>데이터 설명에서도 확인할 수 있지만, 28x28이미지가 784개의 column으로 나타내어져있고, 42000개의 이미지가 <code class=\"language-text\">train.csv</code>에, 28000개가 <code class=\"language-text\">test.csv</code>에 있는것을 확인할 수 있습니다. 아래의 코드는 33번째 이미지가 9이며 아래와 같게 나타나는 것을 볼 수 있습니다.</p>\n<p><img src=\"https://drive.google.com/uc?id=0BwQhFb-IfuTFOEcxUHg0TXBJX2s\" alt=\"Data visualization\"></p>\n<p>그럼 먼저 샘플 제출을 확인해 봅시다. <code class=\"language-text\">sample_submission.csv</code>파일을 보면 모든 이미지를 0으로 만들어 둔 것을 확인할 수 있는데요, 실제로 제출해보면 0.10014점으로 테스트이미지에 10%정도 맞춘것을 확인할 수 있습니다. (테스트 데이터에 0이 10%정도 있어서 그렇습니다.) 그러면 모든 값을 1로 바꾼후 제출해 봅시다. 아래의 코드는 <code class=\"language-text\">sample_submission.csv</code>를 읽어온 후 라벨을 모두 1로 변경시키고 <code class=\"language-text\">first_submission.csv</code>로 저장합니다. 아마 0.11614점을 얻을 수 있을 겁니다.</p>\n<p><img src=\"https://drive.google.com/uc?id=0BwQhFb-IfuTFUTVsZVNxcWRZLW8\" alt=\"first submission\"></p>\n<h2 id=\"간단한-뉴럴네트워크\">간단한 뉴럴네트워크</h2>\n<p><a href=\"https://www.tensorflow.org/get_started/mnist/beginners\">Tensorflow Tutorial</a>에서는 간단한 Softmax Regression과 그 구현방법을 설명하고 있습니다. 샘플 코드도 쉽게 구할 수 있으므로 아래의 코드와 같이 실행해 보는 것은 어려운 일이 아닐 것입니다.</p>\n<p><img src=\"https://drive.google.com/uc?id=0BwQhFb-IfuTFaWdSMnZQY0FmWnc\" alt=\"train\"></p>\n<p>softmax를 사용해서 간단한 머신러닝을 돌려보았습니다. 이제 잘 학습되었는지 검증해 보아야 합니다.</p>\n<p>아래의 <strong>Evaluate</strong>라벨 아래의 코드는 테스트 데이터에서 라벨을 추측하는 과정입니다. 그 밑의 <strong>test with train data</strong>는 train데이터를 다시 입력해서 얼마나 잘 학습되었는지 개략적으로 확인하는 과정입니다. 86%의 정확도를 보여주고 있습니다. 물론 학습에 사용했던 데이터로 검증을 하는 것은 <strong>매우 좋지 않은</strong>방법입니다. 될수 있다면 학습 데이터와 검증 데이터를 미리 나눠 사용하도록 하세요. 아래에서 생성한 <code class=\"language-text\">predicted_labels</code>에는 테스트 데이터 28000개에 대한 추측값이 들어가 있습니다. 우리는 학습시킬때 y값으로 0~9에 해당하는지 아닌지를 <a href=\"https://en.wikipedia.org/wiki/One-hot\">one hot vector</a>로 집어넣었기 때문에 결과로는 0일 확률 ~%, 1일 확률 ~%, ... 9일 확률 ~%가 나오게 됩니다. 이 중 가장 큰 값을 <code class=\"language-text\">tf.argmax</code>를 사용해서 가져오는 과정이 적용되어 결국엔 이 이미지가 어떤 숫자인지 추측하게 됩니다.</p>\n<p><img src=\"https://drive.google.com/uc?id=0BwQhFb-IfuTFelFINDYwTW1vZms\" alt=\"eval\"></p>\n<p>여기 까지 진행했다면 학습된 모델로 테스트 데이터를 추측한 값을 제출해볼 차례입니다. <code class=\"language-text\">predicted_labels</code>를 값으로 가지는 dataframe을 새로 만들어서 <code class=\"language-text\">sample_submission.csv</code>를 참조해 submission을 만들 수 있습니다.</p>\n<p><img src=\"https://drive.google.com/uc?id=0BwQhFb-IfuTFRENJc1ZOMXhJX2M\" alt=\"make submission\"></p>\n<p>제출을 통해 0.92214로 간단한 softmax regression도 매우 높은 결과를 낼 수 있음을 알 수 있습니다. 이제 여기에 여러 다른 방법을 구현함으로써 더  높은 결과를 얻어낼 수 있습니다.</p>\n<p><img src=\"https://drive.google.com/uc?id=0BwQhFb-IfuTFUlZzcEVVT2dyV0k\" alt=\"submission\"></p>","excerpt":"Kaggle로 시작하는 데이터 사이언스: Digit Recognizer 머신러닝에 관련해서 가장 유명한 \"Hello, World!\"같은 예제는 아마 MNIST일 것 입니다. Kaggle에도 MNIST 데이터를 사용한 Digit Recognizer가 존재합니다.  에는 간략한 설명이 적혀있습니다. 탭에는  train, test, sample_submissi…","frontmatter":{"date":"17.10.31","description":"Data Science starting with Kaggle-Digit Recognizer","heroImage":null,"heroImageAlt":null,"tags":["tech"],"title":"Kaggle로 시작하는 데이터 사이언스 Digit Recognizer"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#kaggle%EB%A1%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A4-digit-recognizer\">Kaggle로 시작하는 데이터 사이언스: Digit Recognizer</a></p>\n<ul>\n<li><a href=\"#%ED%99%98%EA%B2%BD-%EC%A4%80%EB%B9%84%ED%95%98%EA%B8%B0\">환경 준비하기</a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\">데이터 확인하기</a></li>\n<li><a href=\"#%EA%B0%84%EB%8B%A8%ED%95%9C-%EB%89%B4%EB%9F%B4%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC\">간단한 뉴럴네트워크</a></li>\n</ul>\n</li>\n</ul>"}},"pageContext":{"id":"b2ca11bd-a19b-56de-bfe6-d2dcede93682","frontmatter__slug":"/Kaggle-Digit-Recognizer","previous":"/ITE3068","previousTitle":"ITE3068: Software Studio","next":"/Kaggle","nextTitle":"Kaggle로 시작하는 데이터 사이언스"}},"staticQueryHashes":["12962592","3399079524","3470099541","76375841"],"slicesMap":{}}